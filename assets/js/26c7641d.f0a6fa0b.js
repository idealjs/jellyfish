"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[172],{8917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>y,toc:()=>u});var i=n(7896),r=n(2784),a=n(876);const o=()=>{const[e,t]=(0,r.useState)([]),n=(0,r.useCallback)((async()=>{const e=await window.showDirectoryPicker();let n=[];for await(const t of e.values())n=n.concat(t.name);t(n)}),[]);return r.createElement("div",null,r.createElement("button",{onClick:n,style:{margin:"8px"}},"get all fileNames in Directory"),r.createElement("div",null,e.map((e=>r.createElement("div",{key:e},e)))))};var l=n(5e3);const s='import React, { useCallback, useState } from "react";\n\nconst getFilesRecursively = async (\n  entry: FileSystemDirectoryHandle | FileSystemFileHandle\n): Promise<File[]> => {\n  if (entry.kind === "file") {\n    const file = await entry.getFile();\n    if (file !== null) {\n      return [file];\n    }\n    return [];\n  } else if (entry.kind === "directory") {\n    let files: File[] = [];\n    for await (const handle of entry.values()) {\n      files = files.concat(await getFilesRecursively(handle));\n    }\n    return files;\n  }\n  return [];\n};\n\nconst LoadDirectory = () => {\n  const [fileNames, setFileNames] = useState<string[]>([]);\n  const onClick = useCallback(async () => {\n    const fileSystemDirectoryHandle = await window.showDirectoryPicker();\n    let fileNames: string[] = [];\n    for await (const entry of fileSystemDirectoryHandle.values()) {\n      fileNames = fileNames.concat(entry.name);\n    }\n    setFileNames(fileNames);\n  }, []);\n  return (\n    <div>\n      <button onClick={onClick} style={{ margin: "8px" }}>\n        get all fileNames in Directory\n      </button>\n      <div>\n        {fileNames.map((name) => {\n          return <div key={name}>{name}</div>;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default LoadDirectory;\n',c={},d="LoadDirectory",y={unversionedId:"LoadDirectory",id:"LoadDirectory",title:"LoadDirectory",description:"",source:"@site/docs/LoadDirectory.mdx",sourceDirName:".",slug:"/LoadDirectory",permalink:"/jellyfish/docs/LoadDirectory",draft:!1,editUrl:"https://github.com/idealjs/jellyfish/tree/main/packages/apps/website/docs/LoadDirectory.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Audio",permalink:"/jellyfish/docs/Audio"},next:{title:"PTG",permalink:"/jellyfish/docs/PTG"}},m={},u=[],f={toc:u},k="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(k,(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"loaddirectory"},"LoadDirectory"),(0,a.kt)(o,{mdxType:"LoadDirectory"}),(0,a.kt)(l.Z,{language:"tsx",mdxType:"CodeBlock"},s))}p.isMDXComponent=!0}}]);